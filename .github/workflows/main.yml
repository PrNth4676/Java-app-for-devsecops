name: Main workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * 1'  # Run weekly
  workflow_dispatch:

jobs:
  build:
    name: Build Java application
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: ['java']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v4.4.0
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Build project using Maven
        run: mvn clean install
      - run: mkdir candidate-binary && cp target/*.jar candidate-binary

      - name: Test with Maven
        run: mvn test

      - name: Copying test results
        run: mkdir test-results && cp target/*-reports/TEST-*.xml test-results

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Application-Binary
          path: candidate-binary

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with: 
          name: Test-Results
          path: test-results

  SAST-CodeQL:
    name: Build and SAST CodeQL
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      # # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
          
      - name: Build with Maven
        run: mvn clean package -B -Dmaven.test.skip                
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}" 

  SCA-Snyk:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@master

      #Grant execution permission to the Maven wrapper
      - name: Make Maven wrapper executable
        run: chmod +x ./mvnw
        
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven-3-jdk-11@master
        #uses: snyk/actions@0.4.0
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
          
  docker:
    runs-on: ubuntu-latest
    needs: build
    name: Build Docker image
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    outputs:
      image-tag: ${{ steps.meta.outputs.image }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Download application binary
      uses: actions/download-artifact@v3.0.0
      with:
        name: Application-Binary
        path: target

    - name: Log in to the Container registry
      uses: docker/login-action@v2.1.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v3.2.0
      with:
        context: .
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      
  container-image-scan:
    needs: docker
    runs-on: ubuntu-latest
    name: Scan Docker image
    env:
      REGISTRY: ghcr.io
      IMAGE_TAG: ${{ needs.docker.outputs.image-tag }}
    steps:
    - name: Log in to the Container registry
      uses: docker/login-action@v2.1.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull Docker image
      run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.7.1
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'template'
        template: '@/contrib/sarif.tpl'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
 

  dast-scan:
    needs: [build, docker]
    runs-on: ubuntu-latest
    name: DAST Scan
    env:
      REGISTRY: ghcr.io
      IMAGE_TAG: ${{ needs.docker.outputs.image-tag }}
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - run: docker rm demoApp | true && docker run -d -p 8080:8080 --name demoApp ${{ env.IMAGE_TAG }}

      - name: Wait for container to start
        run: timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8080)" != "200" ]]; do sleep 5; done' || false

      - name: Test container
        run: curl -s localhost:8080/echo?msg=Hello%20World!

      - name: Run ZAP OWASP full scan
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          docker_name: 'zaproxy/zap-stable'
          token: ${{ secrets.GITHUB_TOKEN }}
          target: 'http://localhost:8080'
          cmd_options: '-a -j -l WARN -z "-addoninstallall" '
          allow_issue_writing: false

      - name: Upload HTML report
        uses: actions/upload-artifact@v3
        with:
          name: DAST_Report.html
          path: report_html.html

      - name: Stop Docker container
        if: always()
        run: |
          docker stop demoApp && docker rm demoApp && docker container prune --force && docker image prune --force
