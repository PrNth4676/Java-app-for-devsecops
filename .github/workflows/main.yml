name: Main workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 0 * * 1'  # Run weekly

jobs:
  build:
    name: Build Java application
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: ['java']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v4.4.0
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Build project using Maven
        run: mvn clean install
      - run: mkdir candidate-binary && cp target/*.jar candidate-binary

      - name: Test with Maven
        run: mvn test

      - name: Copying test results
        run: mkdir test-results && cp target/*-reports/TEST-*.xml test-results

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Application-Binary
          path: candidate-binary

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with: 
          name: Test-Results
          path: test-results

  SAST-CodeQL:
    name: Build and SAST CodeQL
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      # # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.
          
          # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          # queries: security-extended,security-and-quality
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn clean package -B -Dmaven.test.skip                
      - name: Cache build
        id: cache-build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-target
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: target
          path: ${{github.workspace}}/target
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}" 

  SCA-Snyk:
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@master

            # Grant execution permission to the Maven wrapper
      - name: Make Maven wrapper executable
        run: chmod +x ./mvnw
        
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven-3-jdk-11@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
          
  docker:
    runs-on: ubuntu-latest
    needs: build
    name: Build Docker image
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download application binary
        uses: actions/download-artifact@v3.0.0
        with:
          name: Application-Binary
          path: target

      - name: Log in to the Container registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.1.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=pr
            type=ref,event=tag
            type=ref,event=branch
            type=schedule,pattern=main

      - name: Build and push Docker image
        uses: docker/build-push-action@v3.2.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      
      
